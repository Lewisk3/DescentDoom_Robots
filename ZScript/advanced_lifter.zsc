
class AdvancedLifter : DescentDrone
{
	DroneArm armTL, armTR, armBL, armBR;
	
	Default
	{
		Health 100;
		Radius 20;
		Height 20;
		Mass 300;
		Speed 8;
		DropItem "ShieldsBoost", 30, 1;
		
		PainChance 20;
		
		// SeeSound "MediumLifter/See";
		AttackSound "Lifter/Attack";
		
		DescentEnemy.turnSpeed 4.0;
		DescentEnemy.MoveFriction 0.15;
		DescentDrone.HeightOffs 10;
		DescentEnemy.Aggression 0;
		DescentEnemy.ScorePoints 800;
		DescentEnemy.DodgeChance 25;
	}
	
	override void SetupWeapons()
	{
		vector3 armsPivot = (0,0,0); // Will be useful if we have to re-align the body model.
		armTL  = DroneArm.SetupArms(self, "AdvancedLifterArm_TL", armsPivot, (0, 8, 2));
		armTR  = DroneArm.SetupArms(self, "AdvancedLifterArm_TR", armsPivot, (0,-8, 2));
		armBL  = DroneArm.SetupArms(self, "AdvancedLifterArm_BL", armsPivot, (0, 8,-2));
		armBR  = DroneArm.SetupArms(self, "AdvancedLifterArm_BR", armsPivot, (0,-8,-2));
	}
	
	override void Tick()
	{
		super.Tick();
		
		// Animate Eyes
		double phase = (level.time * 0.2)%4;
		frame = phase;
	}
	
	void A_SwingArms(double a, double spd)
	{
		armTL.animateLocalAngles.x = armBL.animateLocalAngles.x = -a;
		armTR.animateLocalAngles.x = armBR.animateLocalAngles.x =  a;
		
		armTL.animateSpeed = armTR.animateSpeed = spd;
		armBL.animateSpeed = armBR.animateSpeed = spd;
	}
	
	States
	{
		Spawn:
			MODL # 10 A_DescentLook(lookFOV:120);
		Loop;
		
		See:
			MODL # 1 A_PlaySeeSound();
		Chase:
			MODL # 3 A_DescentChase(100, 96, 32, 20, false);
		loop;
			
		Attack: 
			TNT1 # 0 
			{
				A_PlayAttackSound();
				A_SwingArms(-70, 0.2);
			}
			MODL # 1 A_SwingArms(60, 0.8);
			MODL AAAA 2 A_DroneMelee(4, 80, 60);  
			MODL # 1 A_SwingArms(0, 0.2);
			MODL # 10;
		goto Chase;
			
		Pain:
			MODL # 6 A_DamageRecoil(3);
		Goto Spawn;
		
		Death:
			TNT1 # 0 
			{
				armTL.Eject();
				armTR.Eject();
				armBL.Eject();
				armBR.Eject();
			}
			MODL ################### 1 
			{
				A_DamageRecoil(8);
				RandomExplosions(4, radius);
			}
			TNT1 # 0 A_DropItems();
			MODL # 4 Spawn("EnemyExplosion", pos);
		Stop;
	}
}

// Modeldef shenanigans
class AdvancedLifterArm_TL : DroneArm {}
class AdvancedLifterArm_TR : DroneArm {}
class AdvancedLifterArm_BL : DroneArm {}
class AdvancedLifterArm_BR : DroneArm {}
